#!/usr/bin/env perl

use strict;

use FindBin qw($Bin);
use lib "$Bin/lib";

use Mojolicious::Lite;
use Mojo::SQLite;
use DateTime;
use DateTime::Format::Strptime;
use DateTime::Format::ISO8601;
use DDP;
use Time::HiRes;

use PortalCalendar;
use PortalCalendar::Config;
use PortalCalendar::Minion;
use PortalCalendar::Schema;

get '/ping' => sub {
    my $self = shift;
    return $self->render(json => { status => 'ok' });
};

get '/' => sub {
    my $self = shift;

    my $last_contact_ago;
    my $last_visit_dt;
    if (my $last_visit_raw = $self->get_config('_last_visit')) {
        $last_visit_dt = DateTime::Format::ISO8601->parse_datetime($last_visit_raw);

        $last_contact_ago = DateTime->now()->subtract_datetime($last_visit_dt);
    }
    return $self->render(
        template => 'index',
        format   => 'html',
        nav_link => 'index',

        last_contact_ago => $last_contact_ago,
        last_visit_dt    => $last_visit_dt,
    );
};

# side by side comparison
get '/test' => sub {
    my $self = shift;
    return $self->render(
        template => 'test',
        format   => 'html',
        nav_link => 'compare',
    );
};

get '/config_ui' => sub {
    my $self = shift;

    my $values = {};
    foreach my $name (@{ $self->config_obj->parameters }) {
        my $value = $self->get_config($name);
        $values->{$name} = $value;
    }

    return $self->render(
        template => 'config_ui',
        format   => 'html',
        values   => $values,
        nav_link => 'config_ui',
    );
};

post '/config_ui' => sub {
    my $self = shift;

    foreach my $name (@{ $self->config_obj->parameters }) {
        my $value = $self->req->param($name);
        $value //= 0 if $name =~ /^(broken_glass|web_calendar1|web_calendar2|web_calendar3|totally_random_icon)$/;    # switch 0/1

        $self->set_config($name, $value);
    }

    $self->flash(message => "Parameters saved.");
    app->minion->enqueue('regenerate_image', []);

    $self->redirect_to('/config_ui');
};

# main HTML page with calendar (either for current or for specific date)
get '/calendar/html' => sub {
    my $self = shift;
    return PortalCalendar->new(app => $self)->html_for_date(DateTime->now());
};

get '/calendar/html/:date' => sub {
    my $self = shift;
    my $dt   = DateTime::Format::Strptime->new(pattern => '%Y-%m-%d')->parse_datetime($self->stash('date'));
    return PortalCalendar->new(app => $self)->html_for_date($dt);
};

# /calendar/bitmap
# /calendar/bitmap?rotate=1&format=png
# /calendar/bitmap?rotate=2&flip=x
# /calendar/bitmap?rotate=3&flip=xy&format=raw8bpp
get '/calendar/bitmap' => sub {
    my $self = shift;

    my $rotate = $self->req->param('rotate') // 0;
    my $flip   = $self->req->param('flip')   // '';
    my $colors = $self->req->param('colors') // 256;
    my $gamma  = $self->req->param('gamma')  // 1.0;
    my $format = $self->req->param('format') // 'png';

    return PortalCalendar->new(app => $self)->generate_bitmap(
        {
            rotate    => $rotate,
            flip      => $flip,
            numcolors => $colors,
            gamma     => $gamma,
            format    => $format,
        }
    );
};

# Return configuration data to client (ePaper display):
get '/config' => sub {
    my $self = shift;

    $self->set_config('_last_visit', DateTime->now()->iso8601);

    my $ret = {
        #
        sleep => $self->get_config('sleep_time'),

        #display     => "BW",                            # "bw", "grayscale",
        # bitmap_path => "/calendar/bitmap/epapermono",
    };

    $self->render(json => $ret);
};

# shortcuts so that we can finetune the parameters here and not constantly reupload them into ESP
get '/calendar/bitmap/epapermono' => sub {
    my $self = shift;

    $self->set_config('_last_visit', DateTime->now()->iso8601);
    return PortalCalendar->new(app => $self)->generate_bitmap(
        {
            rotate    => 3,
            numcolors => 2,
            gamma     => 1.8,
            format    => 'raw1bpp',
        }
    );
};

get '/calendar/bitmap/epapergray' => sub {
    my $self = shift;

    $self->set_config('_last_visit', DateTime->now()->iso8601);
    return PortalCalendar->new(app => $self)->generate_bitmap(
        {
            rotate    => 3,
            numcolors => 4,
            gamma     => 1.8,
            format    => 'raw2bpp',
        }
    );
};

helper config_obj => sub {
    my $self = shift;
    state $obj = PortalCalendar::Config->new(app => $self);
};

helper get_config => sub {
    my $self = shift;
    my $name = shift;
    return $self->config_obj->get($name);
};

helper set_config => sub {
    my $self  = shift;
    my $name  = shift;
    my $value = shift;
    return $self->config_obj->set($name, $value);
};

helper schema => sub { state $schema = PortalCalendar::Schema->connect('dbi:SQLite:local/calendar.db') };

plugin 'TagHelpers';
plugin 'RenderFile';
plugin 'Minion' => {
    SQLite => 'sqlite:' . "$Bin/local/minion.db",    # app->home->child('minion.db'),
};
plugin 'Minion::Admin' => {                          # Host Admin UI
    route => app->routes->any('/admin'),
};

plugin 'Cron' => {
    '0 * * * *' => sub {                             # every hour
        app->log->info("enqueuing regenerate_image task");
        app->minion->enqueue('regenerate_image', []);
    }
};
plugin 'Config';    # for hypnotoad, to load config from app.<mode>.conf

setup_logger();
run_migrations();

# define minion tasks
app->minion->add_task(
    #
    regenerate_image => sub {
        PortalCalendar::Minion::regenerate_image(@_);
    }
);

app->renderer->cache->max_keys(0) if $ENV{MOJO_MODE} eq 'development';    # do not cache CSS etc. in devel mode
app->secrets([ $ENV{MOJO_SECRET_PASSPHRASE} ]);

DateTime->DefaultLocale($ENV{DATETIME_LOCALE}) if $ENV{DATETIME_LOCALE};
app->start;

########################################################################

sub setup_logger {

    # redirect warnings
    $SIG{__WARN__} = sub {
        my $message = shift;
        $message =~ s/\n$//;
        @_ = (app->log, $message);
        goto &Mojo::Log::warn;
    };

    app->log->path("$Bin/log/$ENV{MOJO_MODE}.log");

    # logging to STDERR (for morbo command line usage):
    app->log->handle(\*STDERR);
    return;
}

sub run_migrations {
    my $db = Mojo::SQLite->new('sqlite:local/calendar.db');
    $db->auto_migrate(1)->migrations->from_data();

    # execute any SQL via this handle to run the migrations automatically:
    my $version = $db->db->query('select sqlite_version() as version');
    return;
}

__DATA__
@@ migrations
-- 1 up
CREATE TABLE config (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    name VARCHAR NOT NULL UNIQUE,
    value VARCHAR NOT NULL
);

-- 2 up
-- INSERT INTO config (name, value) VALUES ('broken_glass', '0');

-- 3 up
-- INSERT INTO config (name, value) VALUES ('sleep_time', '3600');

-- 4 up
-- INSERT INTO config (name, value) VALUES ('web_calendar1', '0');
-- INSERT INTO config (name, value) VALUES ('web_calendar_ics_url1', '');
-- INSERT INTO config (name, value) VALUES ('web_calendar2', '0');
-- INSERT INTO config (name, value) VALUES ('web_calendar_ics_url2', '');
-- INSERT INTO config (name, value) VALUES ('web_calendar3', '0');
-- INSERT INTO config (name, value) VALUES ('web_calendar_ics_url3', '');
-- INSERT INTO config (name, value) VALUES ('max_icons_for_calendar', '5');
--
-- INSERT INTO config (name, value) VALUES ('totally_random_icon', '0');
-- INSERT INTO config (name, value) VALUES ('min_random_icons', '4');
-- INSERT INTO config (name, value) VALUES ('max_random_icons', '10');
-- INSERT INTO config (name, value) VALUES ('max_icons_with_calendar', '5');
